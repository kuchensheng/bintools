// Code generated by 'yaegi extract github.com/kuchensheng/bintools/tracer/trace'. DO NOT EDIT.

package lib

import (
	"github.com/kuchensheng/bintools/tracer/trace"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/kuchensheng/bintools/tracer/trace/trace"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"CLIENT":                    reflect.ValueOf(trace.CLIENT),
		"CONFIG":                    reflect.ValueOf(trace.CONFIG),
		"ContentTypeAll":            reflect.ValueOf(trace.ContentTypeAll),
		"ContentTypeCss":            reflect.ValueOf(trace.ContentTypeCss),
		"ContentTypeGif":            reflect.ValueOf(trace.ContentTypeGif),
		"ContentTypeHtml":           reflect.ValueOf(trace.ContentTypeHtml),
		"ContentTypeJavaScript":     reflect.ValueOf(trace.ContentTypeJavaScript),
		"ContentTypeJpeg":           reflect.ValueOf(trace.ContentTypeJpeg),
		"ContentTypeJson":           reflect.ValueOf(trace.ContentTypeJson),
		"ContentTypePng":            reflect.ValueOf(trace.ContentTypePng),
		"ContentTypeText":           reflect.ValueOf(trace.ContentTypeText),
		"DUBBO":                     reflect.ValueOf(trace.DUBBO),
		"ELASTIC":                   reflect.ValueOf(trace.ELASTIC),
		"ERROR":                     reflect.ValueOf(trace.ERROR),
		"FLINK":                     reflect.ValueOf(trace.FLINK),
		"GetLocalIp":                reflect.ValueOf(trace.GetLocalIp),
		"HADOOP":                    reflect.ValueOf(trace.HADOOP),
		"HBASE":                     reflect.ValueOf(trace.HBASE),
		"HIVE":                      reflect.ValueOf(trace.HIVE),
		"HTTP":                      reflect.ValueOf(trace.HTTP),
		"IDS":                       reflect.ValueOf(trace.IDS),
		"IdleConnTimeout":           reflect.ValueOf(trace.IdleConnTimeout),
		"KAFKA":                     reflect.ValueOf(trace.KAFKA),
		"KUDU":                      reflect.ValueOf(trace.KUDU),
		"LocalIdCreate":             reflect.ValueOf(&trace.LocalIdCreate).Elem(),
		"MQTT":                      reflect.ValueOf(trace.MQTT),
		"MYSQL":                     reflect.ValueOf(trace.MYSQL),
		"MaxIdleConns":              reflect.ValueOf(trace.MaxIdleConns),
		"MaxIdleConnsPerHost":       reflect.ValueOf(trace.MaxIdleConnsPerHost),
		"New":                       reflect.ValueOf(trace.New),
		"NewServerTracer":           reflect.ValueOf(trace.NewServerTracer),
		"NewServerTracerWithoutReq": reflect.ValueOf(trace.NewServerTracerWithoutReq),
		"NewWithRpcId":              reflect.ValueOf(trace.NewWithRpcId),
		"OK":                        reflect.ValueOf(trace.OK),
		"ORACLE":                    reflect.ValueOf(trace.ORACLE),
		"REDIS":                     reflect.ValueOf(trace.REDIS),
		"ROCKETMQ":                  reflect.ValueOf(trace.ROCKETMQ),
		"ROOT":                      reflect.ValueOf(trace.ROOT),
		"SERVER":                    reflect.ValueOf(trace.SERVER),
		"SPARK":                     reflect.ValueOf(trace.SPARK),
		"STORM":                     reflect.ValueOf(trace.STORM),
		"SetHttpClient":             reflect.ValueOf(trace.SetHttpClient),
		"TIMEOUT":                   reflect.ValueOf(trace.TIMEOUT),
		"T_HEADER_RPCID":            reflect.ValueOf(constant.MakeFromLiteral("\"T-Head-Rpcid\"", token.STRING, 0)),
		"T_HEADER_TRACEID":          reflect.ValueOf(constant.MakeFromLiteral("\"T-Head-TraceId\"", token.STRING, 0)),
		"T_RESULT_CODE":             reflect.ValueOf(constant.MakeFromLiteral("\"T-RESULT-CODE\"", token.STRING, 0)),
		"T_RESULT_MSG":              reflect.ValueOf(constant.MakeFromLiteral("\"T-RESULT-MSG\"", token.STRING, 0)),
		"WARNING":                   reflect.ValueOf(trace.WARNING),
		"ZOOKEEPER":                 reflect.ValueOf(trace.ZOOKEEPER),

		// type definitions
		"ClientTracer":        reflect.ValueOf((*trace.ClientTracer)(nil)),
		"EndpointEnum":        reflect.ValueOf((*trace.EndpointEnum)(nil)),
		"GenerateTraceId":     reflect.ValueOf((*trace.GenerateTraceId)(nil)),
		"LocalTraceIdCreator": reflect.ValueOf((*trace.LocalTraceIdCreator)(nil)),
		"NetError":            reflect.ValueOf((*trace.NetError)(nil)),
		"Parameter":           reflect.ValueOf((*trace.Parameter)(nil)),
		"ServerTracer":        reflect.ValueOf((*trace.ServerTracer)(nil)),
		"TraceStatusEnum":     reflect.ValueOf((*trace.TraceStatusEnum)(nil)),
		"TraceTypeEnum":       reflect.ValueOf((*trace.TraceTypeEnum)(nil)),
		"Tracer":              reflect.ValueOf((*trace.Tracer)(nil)),

		// interface wrapper definitions
		"_GenerateTraceId": reflect.ValueOf((*_github_com_kuchensheng_bintools_tracer_trace_GenerateTraceId)(nil)),
	}
}

// _github_com_kuchensheng_bintools_tracer_trace_GenerateTraceId is an interface wrapper for GenerateTraceId type
type _github_com_kuchensheng_bintools_tracer_trace_GenerateTraceId struct {
	IValue           interface{}
	WGenerateTraceId func() string
}

func (W _github_com_kuchensheng_bintools_tracer_trace_GenerateTraceId) GenerateTraceId() string {
	return W.WGenerateTraceId()
}
